/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package flowpromanager;

import static flowpromanager.FlowProManager.addToParametersFile;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Enumeration;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import javax.swing.JOptionPane;

/**
 *
 * @author obublik
 */
public class CreateParametersFile extends javax.swing.JFrame {

    int nSel;
    String simulationPath;
    String auxilarySelection;

    /**
     * Creates new form CreateParametersFile
     */
    public CreateParametersFile(String simulationPath) {
        this.simulationPath = simulationPath;
        initComponents();
        nSel = 0;
        jButtonSkip.setEnabled(false);
        createParametersFile(nSel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonSelect = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListParam = new javax.swing.JList();
        jLabelSelect = new javax.swing.JLabel();
        jButtonSkip = new javax.swing.JButton();
        jButtonClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButtonSelect.setText("select");
        jButtonSelect.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonSelectMouseClicked(evt);
            }
        });

        jScrollPane1.setViewportView(jListParam);

        jButtonSkip.setText("skip");
        jButtonSkip.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonSkipMouseClicked(evt);
            }
        });

        jButtonClose.setText("close");
        jButtonClose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonCloseMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelSelect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 313, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonSelect, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                    .addComponent(jButtonSkip, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonClose, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jLabelSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonSelect)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonSkip)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonClose)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSelectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonSelectMouseClicked
        nSel++;
        createParametersFile(nSel);
    }//GEN-LAST:event_jButtonSelectMouseClicked

    private void jButtonSkipMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonSkipMouseClicked
        nSel += 2;
        createParametersFile(nSel);
    }//GEN-LAST:event_jButtonSkipMouseClicked

    private void jButtonCloseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonCloseMouseClicked
        this.dispose();
    }//GEN-LAST:event_jButtonCloseMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonClose;
    private javax.swing.JButton jButtonSelect;
    private javax.swing.JButton jButtonSkip;
    private javax.swing.JLabel jLabelSelect;
    private javax.swing.JList jListParam;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    void createParametersFile(int nSel) {
        String eqsPath = "modules/equations/";
        String dynPath = "modules/dynamics/";
        String optPath = "modules/optimisation/";
        String paramPath = simulationPath + "parameters.txt";

        switch (nSel) {
            case 0:
                File file = new File(paramPath);
                if (!file.exists()) {
                    int conf = JOptionPane.showConfirmDialog(null, "File parameters.txt allready exists. Override?");
                    if (conf > 0) {
                        
                    }
                }
                addToParametersFile(paramPath, false, "FlowPro.jar", "templates/numericalParameters.txt");
                String[] packageNameEqs = getPackageList(eqsPath);
                jLabelSelect.setText("Select equations package");
                jListParam.setListData(packageNameEqs);
                jListParam.setSelectedIndex(0);
                break;
            case 1:
                auxilarySelection = jListParam.getSelectedValue().toString();
                String[] templatesEqs = getTemplates(eqsPath + auxilarySelection);
                jLabelSelect.setText("Select equation template");
                jListParam.setListData(templatesEqs);
                jListParam.setSelectedIndex(0);
                break;
            case 2:
                addToParametersFile(paramPath, true,  "FlowPro.jar", "templates/headerEquations.txt");
                addToParametersFile(paramPath, true, eqsPath + auxilarySelection, jListParam.getSelectedValue().toString());

                String[] packageNameDyn = getPackageList(dynPath);
                jLabelSelect.setText("Select dynamics package");
                jListParam.setListData(packageNameDyn);
                jListParam.setSelectedIndex(0);
                jButtonSkip.setEnabled(true);
                break;
            case 3:
                auxilarySelection = jListParam.getSelectedValue().toString();
                String[] templateDyn = getTemplates(dynPath + auxilarySelection);
                jLabelSelect.setText("Select dynamics template");
                jListParam.setListData(templateDyn);
                jListParam.setSelectedIndex(0);
                jButtonSkip.setEnabled(false);
                break;
            case 4:
                addToParametersFile(paramPath, true, "FlowPro.jar", "templates/headerDynamics.txt");
                addToParametersFile(paramPath, true, dynPath + auxilarySelection, jListParam.getSelectedValue().toString());
                
                String[] packageNameOpt = getPackageList(optPath);
                jLabelSelect.setText("Select optimize package");
                jListParam.setListData(packageNameOpt);
                jListParam.setSelectedIndex(0);
                jButtonSkip.setEnabled(true);
                break;
            case 5:
                auxilarySelection = jListParam.getSelectedValue().toString();
                String[] templateOpt = getTemplates(optPath + auxilarySelection);
                jLabelSelect.setText("Select optimize template");
                jListParam.setListData(templateOpt);
                jListParam.setSelectedIndex(0);
                break;
            case 6:
                addToParametersFile(paramPath, true, "FlowPro.jar", "templates/headerOptimisation.txt");
                addToParametersFile(paramPath, true, optPath + auxilarySelection, jListParam.getSelectedValue().toString());
                break;
            default:
                this.dispose();
                break;
        }

    }

    public String[] getPackageList(String folder) {
        File dir = new File(folder);
        File[] filesList = dir.listFiles();
        int n = 0;
        for (int i = 0; i < filesList.length; i++) {
            if (filesList[i].isFile()) {
                n++;
            }
        }

        String[] list = new String[n];
        int s = 0;
        for (int i = 0; i < filesList.length; i++) {
            if (filesList[i].isFile()) {
                list[s] = filesList[i].toString();
                list[s] = list[s].substring(folder.length());
                s++;
            }
        }

        return list;
    }

    public String[] getTemplates(String jarPath) {
        String[] templates = null;
        try {
            JarFile jarFile = new JarFile(jarPath);
            Enumeration enu = jarFile.entries();
            int s = 0;
            while (enu.hasMoreElements()) {
                JarEntry entry = (JarEntry) enu.nextElement();
                String str = entry.getName();
                if (isTemplate(str) != null) {
                    s++;
                }
            }
            templates = new String[s];
            enu = jarFile.entries();
            s = 0;
            while (enu.hasMoreElements()) {
                JarEntry entry = (JarEntry) enu.nextElement();
                String str = entry.getName();
                if (isTemplate(str) != null) {
                    templates[s] = str;
                    s++;
                }
            }
        } catch (Exception e) {

        }

        return templates;
    }

    public String isTemplate(String str) {
        String[] parts = str.split("/");
        if ("templates".equalsIgnoreCase(parts[0]) && parts.length > 1) {
            return parts[1];
        } else {
            return null;
        }
    }

    public static void addToParametersFile(String paramPath, boolean append, String jarPath, String templatePath) {
        try (BufferedWriter outFile = new BufferedWriter(new FileWriter(paramPath, append))) {
            try (JarFile jarFile = new JarFile(jarPath)) {
                JarEntry entry = jarFile.getJarEntry(templatePath);
                InputStream input = jarFile.getInputStream(entry);
                InputStreamReader isr = new InputStreamReader(input);
                try (BufferedReader reader = new BufferedReader(isr)) {
                    String line;
                    while ((line = reader.readLine()) != null) {
                        outFile.write(line);
                        outFile.newLine();
                    }
                }
            }
            outFile.close();
        } catch (Exception e) {
        }
    }
}
